// Use generate_pb_grpc.sh to regenerate protobuf and gRPC service definitions.
// Paths and package names here, together with the directory this file resides in, are critical
// for gRPC to work in multiple languages.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: protos/faucetconfrpc/faucetconfrpc.proto

package faucetconfserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FaucetConfServer_GetConfigFile_FullMethodName       = "/faucetconfserver.FaucetConfServer/GetConfigFile"
	FaucetConfServer_SetConfigFile_FullMethodName       = "/faucetconfserver.FaucetConfServer/SetConfigFile"
	FaucetConfServer_DelConfigFromFile_FullMethodName   = "/faucetconfserver.FaucetConfServer/DelConfigFromFile"
	FaucetConfServer_AddPortMirror_FullMethodName       = "/faucetconfserver.FaucetConfServer/AddPortMirror"
	FaucetConfServer_RemovePortMirror_FullMethodName    = "/faucetconfserver.FaucetConfServer/RemovePortMirror"
	FaucetConfServer_ClearPortMirror_FullMethodName     = "/faucetconfserver.FaucetConfServer/ClearPortMirror"
	FaucetConfServer_AddPortAcl_FullMethodName          = "/faucetconfserver.FaucetConfServer/AddPortAcl"
	FaucetConfServer_RemovePortAcl_FullMethodName       = "/faucetconfserver.FaucetConfServer/RemovePortAcl"
	FaucetConfServer_SetPortAcl_FullMethodName          = "/faucetconfserver.FaucetConfServer/SetPortAcl"
	FaucetConfServer_SetDpInterfaces_FullMethodName     = "/faucetconfserver.FaucetConfServer/SetDpInterfaces"
	FaucetConfServer_GetDpInfo_FullMethodName           = "/faucetconfserver.FaucetConfServer/GetDpInfo"
	FaucetConfServer_DelDpInterfaces_FullMethodName     = "/faucetconfserver.FaucetConfServer/DelDpInterfaces"
	FaucetConfServer_DelDps_FullMethodName              = "/faucetconfserver.FaucetConfServer/DelDps"
	FaucetConfServer_SetRemoteMirrorPort_FullMethodName = "/faucetconfserver.FaucetConfServer/SetRemoteMirrorPort"
	FaucetConfServer_GetDpNames_FullMethodName          = "/faucetconfserver.FaucetConfServer/GetDpNames"
	FaucetConfServer_GetDpIDs_FullMethodName            = "/faucetconfserver.FaucetConfServer/GetDpIDs"
	FaucetConfServer_GetAclNames_FullMethodName         = "/faucetconfserver.FaucetConfServer/GetAclNames"
	FaucetConfServer_SetDps_FullMethodName              = "/faucetconfserver.FaucetConfServer/SetDps"
	FaucetConfServer_MakeCoprocessorPort_FullMethodName = "/faucetconfserver.FaucetConfServer/MakeCoprocessorPort"
	FaucetConfServer_SetVlanOutAcl_FullMethodName       = "/faucetconfserver.FaucetConfServer/SetVlanOutAcl"
)

// FaucetConfServerClient is the client API for FaucetConfServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NOTE: currently some of these API calls allow specifying an optional config_file.
// This will be removed in future so the client does not need/have knowledge of the underlying YAML store.
type FaucetConfServerClient interface {
	GetConfigFile(ctx context.Context, in *GetConfigFileRequest, opts ...grpc.CallOption) (*GetConfigFileReply, error)
	SetConfigFile(ctx context.Context, in *SetConfigFileRequest, opts ...grpc.CallOption) (*SetConfigFileReply, error)
	DelConfigFromFile(ctx context.Context, in *DelConfigFromFileRequest, opts ...grpc.CallOption) (*DelConfigFromFileReply, error)
	AddPortMirror(ctx context.Context, in *AddPortMirrorRequest, opts ...grpc.CallOption) (*AddPortMirrorReply, error)
	RemovePortMirror(ctx context.Context, in *RemovePortMirrorRequest, opts ...grpc.CallOption) (*RemovePortMirrorReply, error)
	ClearPortMirror(ctx context.Context, in *ClearPortMirrorRequest, opts ...grpc.CallOption) (*ClearPortMirrorReply, error)
	AddPortAcl(ctx context.Context, in *AddPortAclRequest, opts ...grpc.CallOption) (*AddPortAclReply, error)
	RemovePortAcl(ctx context.Context, in *RemovePortAclRequest, opts ...grpc.CallOption) (*RemovePortAclReply, error)
	SetPortAcl(ctx context.Context, in *SetPortAclRequest, opts ...grpc.CallOption) (*SetPortAclReply, error)
	SetDpInterfaces(ctx context.Context, in *SetDpInterfacesRequest, opts ...grpc.CallOption) (*SetDpInterfacesReply, error)
	GetDpInfo(ctx context.Context, in *GetDpInfoRequest, opts ...grpc.CallOption) (*GetDpInfoReply, error)
	DelDpInterfaces(ctx context.Context, in *DelDpInterfacesRequest, opts ...grpc.CallOption) (*DelDpInterfacesReply, error)
	DelDps(ctx context.Context, in *DelDpsRequest, opts ...grpc.CallOption) (*DelDpsReply, error)
	SetRemoteMirrorPort(ctx context.Context, in *SetRemoteMirrorPortRequest, opts ...grpc.CallOption) (*SetRemoteMirrorPortReply, error)
	GetDpNames(ctx context.Context, in *GetDpNamesRequest, opts ...grpc.CallOption) (*GetDpNamesReply, error)
	GetDpIDs(ctx context.Context, in *GetDpIDsRequest, opts ...grpc.CallOption) (*GetDpIDsReply, error)
	GetAclNames(ctx context.Context, in *GetAclNamesRequest, opts ...grpc.CallOption) (*GetAclNamesReply, error)
	SetDps(ctx context.Context, in *SetDpsRequest, opts ...grpc.CallOption) (*SetDpsReply, error)
	MakeCoprocessorPort(ctx context.Context, in *MakeCoprocessorPortRequest, opts ...grpc.CallOption) (*MakeCoprocessorPortReply, error)
	SetVlanOutAcl(ctx context.Context, in *SetVlanOutAclRequest, opts ...grpc.CallOption) (*SetVlanOutAclReply, error)
}

type faucetConfServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFaucetConfServerClient(cc grpc.ClientConnInterface) FaucetConfServerClient {
	return &faucetConfServerClient{cc}
}

func (c *faucetConfServerClient) GetConfigFile(ctx context.Context, in *GetConfigFileRequest, opts ...grpc.CallOption) (*GetConfigFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigFileReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_GetConfigFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetConfigFile(ctx context.Context, in *SetConfigFileRequest, opts ...grpc.CallOption) (*SetConfigFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigFileReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetConfigFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelConfigFromFile(ctx context.Context, in *DelConfigFromFileRequest, opts ...grpc.CallOption) (*DelConfigFromFileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelConfigFromFileReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_DelConfigFromFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) AddPortMirror(ctx context.Context, in *AddPortMirrorRequest, opts ...grpc.CallOption) (*AddPortMirrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPortMirrorReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_AddPortMirror_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) RemovePortMirror(ctx context.Context, in *RemovePortMirrorRequest, opts ...grpc.CallOption) (*RemovePortMirrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortMirrorReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_RemovePortMirror_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) ClearPortMirror(ctx context.Context, in *ClearPortMirrorRequest, opts ...grpc.CallOption) (*ClearPortMirrorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearPortMirrorReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_ClearPortMirror_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) AddPortAcl(ctx context.Context, in *AddPortAclRequest, opts ...grpc.CallOption) (*AddPortAclReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPortAclReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_AddPortAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) RemovePortAcl(ctx context.Context, in *RemovePortAclRequest, opts ...grpc.CallOption) (*RemovePortAclReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortAclReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_RemovePortAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetPortAcl(ctx context.Context, in *SetPortAclRequest, opts ...grpc.CallOption) (*SetPortAclReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPortAclReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetPortAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetDpInterfaces(ctx context.Context, in *SetDpInterfacesRequest, opts ...grpc.CallOption) (*SetDpInterfacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDpInterfacesReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetDpInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) GetDpInfo(ctx context.Context, in *GetDpInfoRequest, opts ...grpc.CallOption) (*GetDpInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDpInfoReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_GetDpInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelDpInterfaces(ctx context.Context, in *DelDpInterfacesRequest, opts ...grpc.CallOption) (*DelDpInterfacesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDpInterfacesReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_DelDpInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) DelDps(ctx context.Context, in *DelDpsRequest, opts ...grpc.CallOption) (*DelDpsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelDpsReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_DelDps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetRemoteMirrorPort(ctx context.Context, in *SetRemoteMirrorPortRequest, opts ...grpc.CallOption) (*SetRemoteMirrorPortReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRemoteMirrorPortReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetRemoteMirrorPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) GetDpNames(ctx context.Context, in *GetDpNamesRequest, opts ...grpc.CallOption) (*GetDpNamesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDpNamesReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_GetDpNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) GetDpIDs(ctx context.Context, in *GetDpIDsRequest, opts ...grpc.CallOption) (*GetDpIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDpIDsReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_GetDpIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) GetAclNames(ctx context.Context, in *GetAclNamesRequest, opts ...grpc.CallOption) (*GetAclNamesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclNamesReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_GetAclNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetDps(ctx context.Context, in *SetDpsRequest, opts ...grpc.CallOption) (*SetDpsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDpsReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetDps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) MakeCoprocessorPort(ctx context.Context, in *MakeCoprocessorPortRequest, opts ...grpc.CallOption) (*MakeCoprocessorPortReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeCoprocessorPortReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_MakeCoprocessorPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetConfServerClient) SetVlanOutAcl(ctx context.Context, in *SetVlanOutAclRequest, opts ...grpc.CallOption) (*SetVlanOutAclReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVlanOutAclReply)
	err := c.cc.Invoke(ctx, FaucetConfServer_SetVlanOutAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaucetConfServerServer is the server API for FaucetConfServer service.
// All implementations must embed UnimplementedFaucetConfServerServer
// for forward compatibility
//
// NOTE: currently some of these API calls allow specifying an optional config_file.
// This will be removed in future so the client does not need/have knowledge of the underlying YAML store.
type FaucetConfServerServer interface {
	GetConfigFile(context.Context, *GetConfigFileRequest) (*GetConfigFileReply, error)
	SetConfigFile(context.Context, *SetConfigFileRequest) (*SetConfigFileReply, error)
	DelConfigFromFile(context.Context, *DelConfigFromFileRequest) (*DelConfigFromFileReply, error)
	AddPortMirror(context.Context, *AddPortMirrorRequest) (*AddPortMirrorReply, error)
	RemovePortMirror(context.Context, *RemovePortMirrorRequest) (*RemovePortMirrorReply, error)
	ClearPortMirror(context.Context, *ClearPortMirrorRequest) (*ClearPortMirrorReply, error)
	AddPortAcl(context.Context, *AddPortAclRequest) (*AddPortAclReply, error)
	RemovePortAcl(context.Context, *RemovePortAclRequest) (*RemovePortAclReply, error)
	SetPortAcl(context.Context, *SetPortAclRequest) (*SetPortAclReply, error)
	SetDpInterfaces(context.Context, *SetDpInterfacesRequest) (*SetDpInterfacesReply, error)
	GetDpInfo(context.Context, *GetDpInfoRequest) (*GetDpInfoReply, error)
	DelDpInterfaces(context.Context, *DelDpInterfacesRequest) (*DelDpInterfacesReply, error)
	DelDps(context.Context, *DelDpsRequest) (*DelDpsReply, error)
	SetRemoteMirrorPort(context.Context, *SetRemoteMirrorPortRequest) (*SetRemoteMirrorPortReply, error)
	GetDpNames(context.Context, *GetDpNamesRequest) (*GetDpNamesReply, error)
	GetDpIDs(context.Context, *GetDpIDsRequest) (*GetDpIDsReply, error)
	GetAclNames(context.Context, *GetAclNamesRequest) (*GetAclNamesReply, error)
	SetDps(context.Context, *SetDpsRequest) (*SetDpsReply, error)
	MakeCoprocessorPort(context.Context, *MakeCoprocessorPortRequest) (*MakeCoprocessorPortReply, error)
	SetVlanOutAcl(context.Context, *SetVlanOutAclRequest) (*SetVlanOutAclReply, error)
	mustEmbedUnimplementedFaucetConfServerServer()
}

// UnimplementedFaucetConfServerServer must be embedded to have forward compatible implementations.
type UnimplementedFaucetConfServerServer struct {
}

func (UnimplementedFaucetConfServerServer) GetConfigFile(context.Context, *GetConfigFileRequest) (*GetConfigFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigFile not implemented")
}
func (UnimplementedFaucetConfServerServer) SetConfigFile(context.Context, *SetConfigFileRequest) (*SetConfigFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigFile not implemented")
}
func (UnimplementedFaucetConfServerServer) DelConfigFromFile(context.Context, *DelConfigFromFileRequest) (*DelConfigFromFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfigFromFile not implemented")
}
func (UnimplementedFaucetConfServerServer) AddPortMirror(context.Context, *AddPortMirrorRequest) (*AddPortMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPortMirror not implemented")
}
func (UnimplementedFaucetConfServerServer) RemovePortMirror(context.Context, *RemovePortMirrorRequest) (*RemovePortMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortMirror not implemented")
}
func (UnimplementedFaucetConfServerServer) ClearPortMirror(context.Context, *ClearPortMirrorRequest) (*ClearPortMirrorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPortMirror not implemented")
}
func (UnimplementedFaucetConfServerServer) AddPortAcl(context.Context, *AddPortAclRequest) (*AddPortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPortAcl not implemented")
}
func (UnimplementedFaucetConfServerServer) RemovePortAcl(context.Context, *RemovePortAclRequest) (*RemovePortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortAcl not implemented")
}
func (UnimplementedFaucetConfServerServer) SetPortAcl(context.Context, *SetPortAclRequest) (*SetPortAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortAcl not implemented")
}
func (UnimplementedFaucetConfServerServer) SetDpInterfaces(context.Context, *SetDpInterfacesRequest) (*SetDpInterfacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDpInterfaces not implemented")
}
func (UnimplementedFaucetConfServerServer) GetDpInfo(context.Context, *GetDpInfoRequest) (*GetDpInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDpInfo not implemented")
}
func (UnimplementedFaucetConfServerServer) DelDpInterfaces(context.Context, *DelDpInterfacesRequest) (*DelDpInterfacesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDpInterfaces not implemented")
}
func (UnimplementedFaucetConfServerServer) DelDps(context.Context, *DelDpsRequest) (*DelDpsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDps not implemented")
}
func (UnimplementedFaucetConfServerServer) SetRemoteMirrorPort(context.Context, *SetRemoteMirrorPortRequest) (*SetRemoteMirrorPortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRemoteMirrorPort not implemented")
}
func (UnimplementedFaucetConfServerServer) GetDpNames(context.Context, *GetDpNamesRequest) (*GetDpNamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDpNames not implemented")
}
func (UnimplementedFaucetConfServerServer) GetDpIDs(context.Context, *GetDpIDsRequest) (*GetDpIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDpIDs not implemented")
}
func (UnimplementedFaucetConfServerServer) GetAclNames(context.Context, *GetAclNamesRequest) (*GetAclNamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclNames not implemented")
}
func (UnimplementedFaucetConfServerServer) SetDps(context.Context, *SetDpsRequest) (*SetDpsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDps not implemented")
}
func (UnimplementedFaucetConfServerServer) MakeCoprocessorPort(context.Context, *MakeCoprocessorPortRequest) (*MakeCoprocessorPortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCoprocessorPort not implemented")
}
func (UnimplementedFaucetConfServerServer) SetVlanOutAcl(context.Context, *SetVlanOutAclRequest) (*SetVlanOutAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanOutAcl not implemented")
}
func (UnimplementedFaucetConfServerServer) mustEmbedUnimplementedFaucetConfServerServer() {}

// UnsafeFaucetConfServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaucetConfServerServer will
// result in compilation errors.
type UnsafeFaucetConfServerServer interface {
	mustEmbedUnimplementedFaucetConfServerServer()
}

func RegisterFaucetConfServerServer(s grpc.ServiceRegistrar, srv FaucetConfServerServer) {
	s.RegisterService(&FaucetConfServer_ServiceDesc, srv)
}

func _FaucetConfServer_GetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_GetConfigFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetConfigFile(ctx, req.(*GetConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetConfigFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetConfigFile(ctx, req.(*SetConfigFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelConfigFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConfigFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelConfigFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_DelConfigFromFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelConfigFromFile(ctx, req.(*DelConfigFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_AddPortMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPortMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).AddPortMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_AddPortMirror_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).AddPortMirror(ctx, req.(*AddPortMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_RemovePortMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).RemovePortMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_RemovePortMirror_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).RemovePortMirror(ctx, req.(*RemovePortMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_ClearPortMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearPortMirrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).ClearPortMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_ClearPortMirror_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).ClearPortMirror(ctx, req.(*ClearPortMirrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_AddPortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).AddPortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_AddPortAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).AddPortAcl(ctx, req.(*AddPortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_RemovePortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).RemovePortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_RemovePortAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).RemovePortAcl(ctx, req.(*RemovePortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetPortAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetPortAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetPortAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetPortAcl(ctx, req.(*SetPortAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetDpInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDpInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetDpInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetDpInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetDpInterfaces(ctx, req.(*SetDpInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_GetDpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDpInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetDpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_GetDpInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetDpInfo(ctx, req.(*GetDpInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelDpInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDpInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelDpInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_DelDpInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelDpInterfaces(ctx, req.(*DelDpInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_DelDps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).DelDps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_DelDps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).DelDps(ctx, req.(*DelDpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetRemoteMirrorPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRemoteMirrorPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetRemoteMirrorPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetRemoteMirrorPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetRemoteMirrorPort(ctx, req.(*SetRemoteMirrorPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_GetDpNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDpNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetDpNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_GetDpNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetDpNames(ctx, req.(*GetDpNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_GetDpIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDpIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetDpIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_GetDpIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetDpIDs(ctx, req.(*GetDpIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_GetAclNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).GetAclNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_GetAclNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).GetAclNames(ctx, req.(*GetAclNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetDps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetDps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetDps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetDps(ctx, req.(*SetDpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_MakeCoprocessorPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCoprocessorPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).MakeCoprocessorPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_MakeCoprocessorPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).MakeCoprocessorPort(ctx, req.(*MakeCoprocessorPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetConfServer_SetVlanOutAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVlanOutAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetConfServerServer).SetVlanOutAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FaucetConfServer_SetVlanOutAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetConfServerServer).SetVlanOutAcl(ctx, req.(*SetVlanOutAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaucetConfServer_ServiceDesc is the grpc.ServiceDesc for FaucetConfServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaucetConfServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faucetconfserver.FaucetConfServer",
	HandlerType: (*FaucetConfServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigFile",
			Handler:    _FaucetConfServer_GetConfigFile_Handler,
		},
		{
			MethodName: "SetConfigFile",
			Handler:    _FaucetConfServer_SetConfigFile_Handler,
		},
		{
			MethodName: "DelConfigFromFile",
			Handler:    _FaucetConfServer_DelConfigFromFile_Handler,
		},
		{
			MethodName: "AddPortMirror",
			Handler:    _FaucetConfServer_AddPortMirror_Handler,
		},
		{
			MethodName: "RemovePortMirror",
			Handler:    _FaucetConfServer_RemovePortMirror_Handler,
		},
		{
			MethodName: "ClearPortMirror",
			Handler:    _FaucetConfServer_ClearPortMirror_Handler,
		},
		{
			MethodName: "AddPortAcl",
			Handler:    _FaucetConfServer_AddPortAcl_Handler,
		},
		{
			MethodName: "RemovePortAcl",
			Handler:    _FaucetConfServer_RemovePortAcl_Handler,
		},
		{
			MethodName: "SetPortAcl",
			Handler:    _FaucetConfServer_SetPortAcl_Handler,
		},
		{
			MethodName: "SetDpInterfaces",
			Handler:    _FaucetConfServer_SetDpInterfaces_Handler,
		},
		{
			MethodName: "GetDpInfo",
			Handler:    _FaucetConfServer_GetDpInfo_Handler,
		},
		{
			MethodName: "DelDpInterfaces",
			Handler:    _FaucetConfServer_DelDpInterfaces_Handler,
		},
		{
			MethodName: "DelDps",
			Handler:    _FaucetConfServer_DelDps_Handler,
		},
		{
			MethodName: "SetRemoteMirrorPort",
			Handler:    _FaucetConfServer_SetRemoteMirrorPort_Handler,
		},
		{
			MethodName: "GetDpNames",
			Handler:    _FaucetConfServer_GetDpNames_Handler,
		},
		{
			MethodName: "GetDpIDs",
			Handler:    _FaucetConfServer_GetDpIDs_Handler,
		},
		{
			MethodName: "GetAclNames",
			Handler:    _FaucetConfServer_GetAclNames_Handler,
		},
		{
			MethodName: "SetDps",
			Handler:    _FaucetConfServer_SetDps_Handler,
		},
		{
			MethodName: "MakeCoprocessorPort",
			Handler:    _FaucetConfServer_MakeCoprocessorPort_Handler,
		},
		{
			MethodName: "SetVlanOutAcl",
			Handler:    _FaucetConfServer_SetVlanOutAcl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/faucetconfrpc/faucetconfrpc.proto",
}
